//
// XummAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class XummAPI {
    /**
     Submit a new payload to Xumm

     - parameter body: (body) Xumm Payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func xummPayload(body: XummPayloadRequest, completion: @escaping ((_ data: XummPayloadResponse?,_ error: Error?) -> Void)) {
        xummPayloadWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submit a new payload to Xumm
     - POST /xumm/payload
     - 

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "payloadId" : "payloadId"
}}]
     - parameter body: (body) Xumm Payload 

     - returns: RequestBuilder<XummPayloadResponse> 
     */
    open class func xummPayloadWithRequestBuilder(body: XummPayloadRequest) -> RequestBuilder<XummPayloadResponse> {
        let path = "/xumm/payload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<XummPayloadResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Submit a signin request Xumm

     - parameter body: (body) Xumm Signin Parameters 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func xummSignin(body: XummSigninRequest, completion: @escaping ((_ data: XummSigninResponse?,_ error: Error?) -> Void)) {
        xummSigninWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submit a signin request Xumm
     - POST /xumm/signin
     - 

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "userToken" : "userToken",
  "address" : "address"
}}]
     - parameter body: (body) Xumm Signin Parameters 

     - returns: RequestBuilder<XummSigninResponse> 
     */
    open class func xummSigninWithRequestBuilder(body: XummSigninRequest) -> RequestBuilder<XummSigninResponse> {
        let path = "/xumm/signin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<XummSigninResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Handle Xumm Webhook

     - parameter body: (body) Xumm Webhook Payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func xummWebhook(body: XummWebhookRequest, completion: @escaping ((_ data: MessageResponse?,_ error: Error?) -> Void)) {
        xummWebhookWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Handle Xumm Webhook
     - POST /xumm/webhook
     - 

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "type" : "type",
  "message" : "message"
}}]
     - parameter body: (body) Xumm Webhook Payload 

     - returns: RequestBuilder<MessageResponse> 
     */
    open class func xummWebhookWithRequestBuilder(body: XummWebhookRequest) -> RequestBuilder<MessageResponse> {
        let path = "/xumm/webhook"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MessageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
